# A scrape configuration for running Prometheus on a Kubernetes cluster.
# This uses separate scrape configs for cluster components (i.e. API server, node)
# and services to allow each to use different authentication configs.
#
# Kubernetes labels will be added as Prometheus labels on metrics via the
# `labelmap` relabeling action.
global:
  scrape_interval:     15s
  # How frequently to evaluate rules.
  evaluation_interval: 15s
  external_labels:
    monitor: 'core'




# alert rule configuration for deepshare and physical nodes
rule_files:
  - '/var/prometheus/alert.rules'


scrape_configs:

- job_name: 'prometheus'
  scrape_interval: 5s

  target_groups:
    - targets: ['localhost:9090']
    - labels:
        infra: prometheus

- job_name: "node"
  scrape_interval: "15s"
   
  target_groups:
    - targets: ['10.100.48.95:9100']

- job_name: 'deepshare2'
  scrape_interval: 5s
  scrape_timeout: 10s

# scrape  website status from blackbox-exporter plugin
- job_name: 'website'
  metrics_path: /probe
  params:
    module: [http_2xx]  # Look for a HTTP 200 response.
  target_groups:
    - targets:
      - deepshare.io   # Target to probe
      - dashboard.deepshare.io
      - singulariti.io
      - blog.singulariti.io
      - collect-ua.ds-production:8080


  relabel_configs:
    - source_labels: [__address__]
      regex: (.*)(:80)?
      target_label: __param_target
      replacement: ${1}
    - source_labels: [__param_target]
      regex: (.*)
      target_label: instance
      replacement: ${1}
    - source_labels: []
      regex: .*
      target_label: __address__
      replacement: 10.100.48.91:9115  # Blackbox exporter.

# scrap  deepshare2 http-restful services  status from blackbox-exporter plugin
- job_name: 'deepshare2-services'
  metrics_path: /probe
  params:
    module: [http_2xx]  # Look for a HTTP 200 response.
  target_groups:
    - targets:
      - deepshare2-appcookie.ds-production:16759
      - deepshare2-appinfo.ds-production:16759
      - deepshare2-bind.ds-production:16759
      - deepshare2-cookie.ds-production:16759
      - deepshare2-counter.ds-production:16759
      - deepshare2-dsaction.ds-production:16759
      - deepshare2-dsusage.ds-production:16759
      - deepshare2-genurl.ds-production:16759
      - deepshare2-inappdata.ds-production:16759
      - deepshare2-jsapi.ds-production:16759
      - deepshare2-match.ds-production:16759
      - deepshare2-sharelink.ds-production:16759
      - deepshare2-snowflake.ds-production:16760

  relabel_configs:
    - source_labels: [__address__]
      regex: (.*)(:80)?
      target_label: __param_target
      replacement: ${1}
    - source_labels: [__param_target]
      regex: (.*)
      target_label: instance
      replacement: ${1}
    - source_labels: []
      regex: .*
      target_label: __address__
      replacement: 10.100.48.91:9115  # Blackbox exporter.
# scrap  deepstats http-restful services  status from blackbox-exporter plugin
- job_name: 'deepstats-services'
  metrics_path: /probe
  params:
    module: [http_2xx]  # Look for a HTTP 200 response.
  target_groups:
    - targets:
      - deepshare2-oauth.ds-production:10032
      - deepstats-api.ds-production:10002

  relabel_configs:
    - source_labels: [__address__]
      regex: (.*)(:80)?
      target_label: __param_target
      replacement: ${1}
    - source_labels: [__param_target]
      regex: (.*)
      target_label: instance
      replacement: ${1}
    - source_labels: []
      regex: .*
      target_label: __address__
      replacement: 10.100.48.91:9115  # Blackbox exporter.

- job_name: 'redis_exporter'
  target_groups:
  - targets: ['10.100.48.92:9121']
  - labels:
      db: redis

- job_name: 'elasticsearch_exporter'
  target_groups:
  - targets: ['10.100.48.94:9108']
  - labels:
      infra: elasticsearch

- job_name: 'nsq_exporter'
  target_groups:
  - targets: ['10.100.48.93:9117']
  - labels:
      db: nsqd
  file_sd_configs:
  - names:
      ['/var/prometheus/tgroups/*.yaml']
    # Refresh interval to re-read the files
    refresh_interval: 30s

- job_name: 'kubernetes-cluster'

  # This TLS & bearer token file config is used to connect to the actual scrape
  # endpoints for cluster components. This is separate to discovery auth
  # configuration (`in_cluster` below) because discovery & scraping are two
  # separate concerns in Prometheus.
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

  kubernetes_sd_configs:
  - api_servers:
    # - 'https://10.100.0.1'
    - 'https://172.18.0.4:6443'
    kubelet_port: 10255
    in_cluster: true

  relabel_configs:
  - source_labels: [__meta_kubernetes_role]
    action: keep
    regex: (?:apiserver|node|pods)
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - source_labels: [__meta_kubernetes_role]
    action: replace
    target_label: kubernetes_role
# Scrape config for service endpoints.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/scrape`: Only scrape services that have a value of `true`
# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
# to set this to `https` & most likely set the `tls_config` of the scrape config.
# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
# * `prometheus.io/port`: If the metrics are exposed on a different port to the
# service then set this appropriately.
- job_name: 'kubernetes-service-endpoints'

  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

  kubernetes_sd_configs:
  - api_servers:
    # - 'https://10.100.0.1'
    - 'https://172.18.0.4:6443'
    kubelet_port: 10255
    in_cluster: true

  relabel_configs:
  - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_scrape]
    action: keep
    regex: endpoint;true
  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
    action: replace
    target_label: __scheme__
    regex: (https?)
  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
    action: replace
    target_label: __metrics_path__
    regex: (.+)
  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
    action: replace
    target_label: __address__
    regex: (.+)(?::\d+);(\d+)
    replacement: $1:$2
  - action: labelmap
    regex: __meta_kubernetes_service_label_(.+)
  - source_labels: [__meta_kubernetes_role]
    action: replace
    target_label: kubernetes_role
  - source_labels: [__meta_kubernetes_service_namespace]
    action: replace
    target_label: kubernetes_namespace
  - source_labels: [__meta_kubernetes_service_name]
    action: replace
    target_label: kubernetes_name
